# Casos de Prueba para el Parser

# 1. Operaciones aritméticas básicas
5 + 3 * 2

# 2. Precedencia con paréntesis
(5 + 3) * 2

# 3. Operaciones lógicas
true and false or true

# 4. Operaciones de comparación
10 > 5 and 3 < 7

# 5. Binding de variables simple
let(x)(10)(x + 5)
->let x = 10 in x + 5

# 6. Binding de variables anidado
let(x)(10)(let(y)(20)(x + y))
let x = 10 in let y = 20 in x + y

# 7. Expresión condicional simple
if(5 > 3)(42)
- no va

# 8. Expresión condicional con else
if(false) 10 
 else 20 

# 9. Conversión de tipos
itos(42)
rtos(3.14)

# 10. Concatenación de strings
"Hola" # " mundo"

# 11. Concatenación con conversión
 itos(42) # " es la respuesta"

# 12. Print simple
print("Hola mundo")

# 13. Print con variable
let(mensaje)("Buenos días")(print(mensaje))
let mensaje = "buenos dias" in print(mensaje)

# 14. Operación compleja con variables y condicionales
let(x)(10)(let(y)(5)(if(x > y)(x + y) else (x - y)))
cambiar en el mismo
# 15. Pares
pair(1)(2)
cambiar a (1 , 2) -> agregar token_coma

# 16. Números reales
3.14 + 2.86

# 17. Operación con módulo
17 % 5

# 18. Negación lógica
not false

# 19. XOR lógico
true xor false

# 20. Comparaciones múltiples
5 <= 10 and 3 >= 1

#21. Funciones simples
let(cuadrado)(fun(cuadrado)(x)(x * x ))
(
   print(cuadrado(5))
)
fun cuadrado(x) x*x

#22. Funciones Recursivas
let(cuadrado)(fun(cuadrado)(x)(x + 5 ))
(
   print(cuadrado(cuadrado(5)))
)
fun pow(x, y) if(y == 0) 1
              else x * pow(x, y-1)

#21. Funciones multiples
let(def_cuadrado)(fun(cuadrado)(x)(x * x ))
(
    let(def_doble)(fun(doble)(x)(x + x ))
    (
        print(cuadrado(5) + doble(10))
    ) 
)