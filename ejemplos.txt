# Casos de Prueba para el Parser

# 1. Operaciones aritméticas básicas
5 + 3 * 2

# 2. Precedencia con paréntesis
(5 + 3) * 2

# 3. Operaciones lógicas
true and false or true

# 4. Operaciones de comparación
10 > 5 and 3 < 7

# 5. Binding de variables simple
let x = 10 in x + 5

# 6. Binding de variables anidado
let x = 10 in let y = 20 in x + y


# 7. Expresión condicional con else
if(false) 10 
 else 20 
end

# 8. Conversión de tipos
itos(42)
rtos(3.14)

# 9. Concatenación de strings
"Hola" # " mundo"

# 10. Concatenación con conversión
 itos(42) # " es la respuesta"

# 11. Print simple
print("Hola mundo")

# 12. Print con variable
let mensaje = "buenos dias" in print(mensaje)

# 13. Operación compleja con variables y condicionales
let x = 11 in  if(x > 10)  print(x - 20)
               else  print(x + 20)
         end

# 14. Operación compleja con variables y condicionales anidados
let x = -100 in if(x > 0)  if(x < 50) 
                  print("x es MENOR que 50") 
                  else print("x es MAYOR que 50")
                  end
               else 
                  if(x > -10) 
                  print("x mayor que -10") 
                  else print("x menor que -10")
                  end
               end
                       
#15. Variables anidadas declaradas.                    
let x = 10 in if(x > 10)  let y = 5 in print(x - y)   
              else let z = 20 in  print(x + z)  
              end   

#16. Pares
let a = (x , y) in print(a)
let a = (x , (y,  z)) in print(a)
 pares con funciones fst y snd
fun sum(x)
    let dupla = snd(x) in
        if(dubla != nullptr)
            print(dupla + fst(x))
        else
            print(fst(x))
        end    
end

#17. Números reales
3.14 + 2.86

#18. Operación con módulo
17 % 5

#19. Negación lógica
not false

#20. XOR lógico
true xor false

#21. Comparaciones múltiples
5 <= 10 and 3 >= 1


#22. Funciones simples
fun sum(x) if(x == 0) print("fin el ciclo")
           else print(x)
           end
end

#23. Funciones Recursivas
fun sum(x)  if(x == 0) print("fin el ciclo")
            else x+sum(x)
            end
    end



#24. arrays
    [, , ] -> buscar la forma de agregar un operador "add", "eliminar", ""

#25.
tupla -> 
(x , y , z .....)    

#26.
_n(tupla) -> donde n el la posicion del elemento. si n es mayor a la cantidad de elementos "ERROR"

[] -> internamente es el par vacio ()
[1, 2 , 3 ] -> se representa con pares anidados (1, (2 , (3 , "end" ))) 

add(0, l)  = [0, 1, 2 , 3 ] -> se representa con pares anidados (0, (l , "end" ))
0 <+>  [1, 2 , 3 ]  = [0, 1, 2 , 3 ] -> se representa con pares anidados (0, (1, (2 , (3 , "end" )))) 
