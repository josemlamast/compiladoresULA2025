@@ CHECKFALSE - Sintaxis correcta y tipos correctos
@@ Ejemplos que pasan tanto parse como type checking

@@ 1. OPERACIONES ARITMÉTICAS CON TIPOS COMPATIBLES
5 + 3
2.5 - 1.2
10 * 2
8 / 4
5 % 3

@@ 2. OPERACIONES LÓGICAS CON TIPOS COMPATIBLES
true and false
true or true
false xor true
not true
not false

@@ 3. COMPARACIONES CON TIPOS COMPATIBLES
5 > 3
2.5 < 3.14
5 == 5
10 != 5
5 >= 5
3 <= 5

@@ 4. OPERACIONES CON ARRAYS Y TIPOS CORRECTOS
head([5, 2, 8])
tail([5, 2, 8])
length([5, 2, 8])
head([true, false])
tail([true, false])

@@ 5. OPERACIONES CON PAIRS Y TIPOS CORRECTOS
fst((5, 2))
snd((5, 2))
fst((true, false))
snd((true, false))
fst(("hola", "mundo"))

@@ 6. CONCATENACIÓN CON TIPOS COMPATIBLES
<+>(empty, [5])
<+>([5], [2, 8])
<+>([1, 2], [3, 4])
<+>([true], [false])

@@ 7. ELIMINACIÓN CON TIPOS COMPATIBLES
<->([5, 2, 8], 0)
<->([5, 2, 8], 1)
<->([true, false], 0)

@@ 8. LET CON TIPOS COMPATIBLES
let x = 5 in x + 3 end
let x = true in x and false end
let x = "hola" in x end
let x = 2.5 in x * 2 end

@@ 9. IF CON TIPOS DE RETORNO COMPATIBLES
if (5 > 3) 10 else 5 end
if (true) "verdadero" else "falso" end
if (false) 1 else 2 end
if (2.5 > 1.0) 3.14 else 2.71 end

@@ 10. FUNCIONES CON TIPOS COMPATIBLES
fun test(x) x + 1 end
fun test(x) x * 2 end
fun test(x) head(x) end
fun test(x) fst(x) end

@@ 11. LLAMADAS CON TIPOS CORRECTOS
fun test(x) x + 1 end
test(5)

fun test(x) x * 2 end
test(2.5)

fun test(x) head(x) end
test([5, 2, 8])

fun test(x) fst(x) end
test((5, 2))

@@ 12. ARRAYS CON TIPOS HOMOGÉNEOS
[5, 2, 8]
[2.5, 3.14, 1.0]
[true, false, true]
["hola", "mundo", "texto"]

@@ 13. PAIRS CON TIPOS COMPATIBLES
(5, 2)
(2.5, 3.14)
(true, false)
("hola", "mundo")

@@ 14. FUNCIONES RECURSIVAS CON TIPOS CORRECTOS
fun factorial(x) 
    if (x == 0) 
        1
    else
        x * factorial(x - 1)
    end
end

@@ 15. EXPRESIONES COMPLEJAS CON TIPOS COMPATIBLES
let x = 5 in 
    let y = 3 in 
        x + y
    end
end

let x = true in 
    let y = false in 
        x and y
    end
end

@@ 16. COMPARACIONES CON TIPOS COMPATIBLES
5 > 3
2.5 < 3.14
true == true
false != true
"hola" == "hola"

@@ 17. FUNCIONES CON TIPOS DE RETORNO CONSISTENTES
fun test(x) 
    if (x > 0) 
        5
    else
        0
    end
end

fun test(x) 
    if (x) 
        "verdadero"
    else
        "falso"
    end
end

@@ 18. FUNCIONES CON PARÁMETROS DE TIPO CORRECTO
fun procesarArray(arr) 
    head(arr)
end

procesarArray([5, 2, 8])

fun procesarPair(pair) 
    fst(pair) + snd(pair)
end

procesarPair((5, 3))

@@ 19. EXPRESIONES CON TIPOS COMPATIBLES EN OPERACIONES
5 + 3
2.5 * 2.0
true and false
"hola" + "mundo"

@@ 20. FUNCIONES CON RETORNO DE TIPO CORRECTO
fun obtenerMaximo(arr) 
    if (head(arr) > head(tail(arr))) 
        head(arr)
    else
        head(tail(arr))
    end
end

@@ 21. LET CON TIPOS COMPATIBLES EN EXPRESIONES COMPLEJAS
let x = 5 in 
    if (x > 0) 
        x + 1
    else
        x - 1
    end
end

let x = true in 
    if (x) 
        "verdadero"
    else
        "falso"
    end
end

@@ 22. FUNCIONES CON TIPOS COMPATIBLES EN RECURSION
fun contar(x) 
    if (x == 0) 
        0
    else
        contar(x - 1) + 1
    end
end

@@ 23. OPERACIONES CON TIPOS DE ARRAY CORRECTOS
<+>([5], [2, 8])
<->([5, 2, 8], 0)
head([5, 2, 8])
tail([5, 2, 8])

@@ 24. EXPRESIONES CON TIPOS COMPATIBLES EN COMPARACIONES
if (5 > 3) 
    10
else
    5
end

if (true) 
    "verdadero"
else
    "falso"
end

@@ 25. FUNCIONES CON TIPOS COMPATIBLES EN OPERACIONES ARITMÉTICAS
fun sumar(x) 
    x + 1
end

fun multiplicar(x) 
    x * 2
end

fun dividir(x) 
    x / 2
end

@@ 26. EXPRESIONES CON TIPOS MIXTOS COMPATIBLES
let x = 5 in 
    let y = 2.5 in 
        x + y
    end
end

@@ 27. FUNCIONES CON TIPOS DE ARRAY COMPATIBLES
fun procesarArray(arr) 
    <+>(empty, [head(arr)])
end

procesarArray([5, 2, 8])

@@ 28. EXPRESIONES CON TIPOS DE PAIR COMPATIBLES
fun procesarPair(pair) 
    fst(pair) * snd(pair)
end

procesarPair((5, 3))

@@ 29. FUNCIONES CON TIPOS DE BOOLEAN COMPATIBLES
fun esPositivo(x) 
    x > 0
end

esPositivo(5)
esPositivo(-3)

@@ 30. EXPRESIONES COMPLEJAS CON TIPOS COMPATIBLES
let x = 5 in 
    let y = 3 in 
        let z = 2 in 
            x + y + z
        end
    end
end
